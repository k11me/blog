<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.2">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-10-26T04:34:56+08:00</updated><id>http://localhost:4000/</id><title type="html">Keleven.Me</title><subtitle>千变万化的是世界</subtitle><author><name>K11</name></author><entry><title type="html">几天份</title><link href="http://localhost:4000/living/2018/10/25/blog/" rel="alternate" type="text/html" title="几天份" /><published>2018-10-25T08:00:00+08:00</published><updated>2018-10-25T08:00:00+08:00</updated><id>http://localhost:4000/living/2018/10/25/blog</id><content type="html" xml:base="http://localhost:4000/living/2018/10/25/blog/">&lt;h1 id=&quot;23号的份&quot;&gt;23号的份&lt;/h1&gt;

&lt;h2 id=&quot;vue-当前页刷新&quot;&gt;vue 当前页刷新&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;location.reload()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;其他&quot;&gt;其他&lt;/h2&gt;

&lt;p&gt;3合一验证 完成了&lt;/p&gt;

&lt;p&gt;后端做成服务提供者了&lt;/p&gt;

&lt;p&gt;用起来容易了不少&lt;/p&gt;

&lt;p&gt;admin 部分要收尾了 😊&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;24号的份&quot;&gt;24号的份&lt;/h1&gt;

&lt;p&gt;为一些请求添加二步验证&lt;/p&gt;

&lt;p&gt;之后是定时服务 与 logs&lt;/p&gt;

&lt;p&gt;还有 &lt;code class=&quot;highlighter-rouge&quot;&gt;admin&lt;/code&gt; 基本信息页面&lt;/p&gt;

&lt;p&gt;游戏模式有一次眉目了&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;25号的份&quot;&gt;25号的份&lt;/h1&gt;

&lt;h2 id=&quot;laravel下错误返回分类&quot;&gt;laravel下错误返回分类&lt;/h2&gt;

&lt;p&gt;在一些情况下想要对不同的请求做不同错误的返回&lt;/p&gt;

&lt;p&gt;可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;$request-&amp;gt;ajax()&lt;/code&gt;来识别&lt;code class=&quot;highlighter-rouge&quot;&gt;ajax&lt;/code&gt;请求&lt;/p&gt;

&lt;p&gt;对于自定义错误返回非常有用&lt;/p&gt;

&lt;p&gt;更新&lt;code class=&quot;highlighter-rouge&quot;&gt;node&lt;/code&gt; 后包报错，直接删除&lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;之后&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt; 可以解决大多数问题&lt;/p&gt;</content><author><name>K11</name></author><category term="日记" /><category term="laravel" /><summary type="html">23号的份 vue 当前页刷新 location.reload() 其他 3合一验证 完成了 后端做成服务提供者了 用起来容易了不少 admin 部分要收尾了 😊 24号的份 为一些请求添加二步验证 之后是定时服务 与 logs 还有 admin 基本信息页面 游戏模式有一次眉目了 25号的份 laravel下错误返回分类 在一些情况下想要对不同的请求做不同错误的返回 可以使用$request-&amp;gt;ajax()来识别ajax请求 对于自定义错误返回非常有用 更新node 后包报错，直接删除node_modules 之后npm install 可以解决大多数问题</summary></entry><entry><title type="html">使用 postman 进行 post</title><link href="http://localhost:4000/living/2018/10/21/blog/" rel="alternate" type="text/html" title="使用 postman 进行 post" /><published>2018-10-21T08:00:00+08:00</published><updated>2018-10-21T08:00:00+08:00</updated><id>http://localhost:4000/living/2018/10/21/blog</id><content type="html" xml:base="http://localhost:4000/living/2018/10/21/blog/">&lt;h1 id=&quot;使用-postman-进行-post&quot;&gt;使用 postman 进行 post&lt;/h1&gt;

&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;postman&lt;/code&gt; 直接 &lt;code class=&quot;highlighter-rouge&quot;&gt;post&lt;/code&gt; 的方法&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;laravel&lt;/code&gt; 本身有&lt;code class=&quot;highlighter-rouge&quot;&gt;CSRF&lt;/code&gt; 直接使用&lt;code class=&quot;highlighter-rouge&quot;&gt;post&lt;/code&gt; 、 &lt;code class=&quot;highlighter-rouge&quot;&gt;put&lt;/code&gt; 等等会被阻断&lt;/p&gt;

&lt;p&gt;找到一个可以解决办法&lt;/p&gt;

&lt;h2 id=&quot;postman-chrome-插件版本&quot;&gt;postman chrome 插件版本&lt;/h2&gt;

&lt;p&gt;新建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;environment&lt;/code&gt; 并切换到新建，右上⚙位置&lt;/p&gt;

&lt;p&gt;找一个&lt;code class=&quot;highlighter-rouge&quot;&gt;get&lt;/code&gt;请求 在&lt;code class=&quot;highlighter-rouge&quot;&gt;Tests&lt;/code&gt;标签下输入&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var xsrfCookie = postman.getResponseCookie(&quot;XSRF-TOKEN&quot;);
postman.setEnvironmentVariable(&quot;XSRF-TOKEN&quot;, xsrfCookie.value);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;`` 对应该的是第二行要注意下。&lt;/p&gt;

&lt;p&gt;用于获取&lt;code class=&quot;highlighter-rouge&quot;&gt;XSRF-TOKEN&lt;/code&gt;的值。&lt;/p&gt;

&lt;p&gt;查看&lt;code class=&quot;highlighter-rouge&quot;&gt;environment&lt;/code&gt;中 &lt;code class=&quot;highlighter-rouge&quot;&gt;XSRF-TOKEN&lt;/code&gt; 是否被正确传入。右上👁位置&lt;/p&gt;

&lt;p&gt;确认后在&lt;code class=&quot;highlighter-rouge&quot;&gt;post&lt;/code&gt; 的&lt;code class=&quot;highlighter-rouge&quot;&gt;Headers&lt;/code&gt; 中添加&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;X-XSRF-TOKEN : &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;之后就可以正常提交&lt;code class=&quot;highlighter-rouge&quot;&gt;post&lt;/code&gt;了&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意：laravel XSRF-TOKEN 有时效性 注意更新&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当&lt;code class=&quot;highlighter-rouge&quot;&gt;XSRF-TOKEN&lt;/code&gt; 中有特殊字符，例如&lt;code class=&quot;highlighter-rouge&quot;&gt;%&lt;/code&gt;时，&lt;code class=&quot;highlighter-rouge&quot;&gt;laravel X-XSRF-TOKEN&lt;/code&gt; 验证会失败&lt;/p&gt;

&lt;p&gt;主要是为&lt;code class=&quot;highlighter-rouge&quot;&gt;postman&lt;/code&gt; 对&lt;code class=&quot;highlighter-rouge&quot;&gt;XSRF-TOKEN&lt;/code&gt;识别有问题，桌面版本没有这个问题&lt;/p&gt;

&lt;h2 id=&quot;postman-桌面版&quot;&gt;postman 桌面版&lt;/h2&gt;

&lt;p&gt;同上&lt;code class=&quot;highlighter-rouge&quot;&gt;Tests&lt;/code&gt;标签可以写成&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pm.environment.set(&quot;xsrf-token&quot;, decodeURIComponent(pm.cookies.get(&quot;XSRF-TOKEN&quot;)))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;laravel valet&lt;/code&gt; 时，&lt;code class=&quot;highlighter-rouge&quot;&gt;postman&lt;/code&gt;不能正确访问域名……&lt;/p&gt;

&lt;p&gt;原因&lt;code class=&quot;highlighter-rouge&quot;&gt;valet&lt;/code&gt;产生的&lt;code class=&quot;highlighter-rouge&quot;&gt;SSL&lt;/code&gt;证书，所以被阻挡，手动关闭后正常使用&lt;/p&gt;

&lt;p&gt;要关闭的位置&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;settings&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;SSL certificate verifcation&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;off&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;之后就可以正常使用了&lt;/p&gt;

&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;valet&lt;/code&gt;时 &lt;code class=&quot;highlighter-rouge&quot;&gt;link&lt;/code&gt; 与 &lt;code class=&quot;highlighter-rouge&quot;&gt;park&lt;/code&gt; 混用会报错！&lt;/p&gt;</content><author><name>K11</name></author><category term="日记" /><category term="postman" /><category term="laravel" /><summary type="html">使用 postman 进行 post 使用postman 直接 post 的方法 laravel 本身有CSRF 直接使用post 、 put 等等会被阻断 找到一个可以解决办法 postman chrome 插件版本 新建一个environment 并切换到新建，右上⚙位置 找一个get请求 在Tests标签下输入 var xsrfCookie = postman.getResponseCookie(&quot;XSRF-TOKEN&quot;); postman.setEnvironmentVariable(&quot;XSRF-TOKEN&quot;, xsrfCookie.value); `` 对应该的是第二行要注意下。 用于获取XSRF-TOKEN的值。 查看environment中 XSRF-TOKEN 是否被正确传入。右上👁位置 确认后在post 的Headers 中添加 X-XSRF-TOKEN : 之后就可以正常提交post了 注意：laravel XSRF-TOKEN 有时效性 注意更新 当XSRF-TOKEN 中有特殊字符，例如%时，laravel X-XSRF-TOKEN 验证会失败 主要是为postman 对XSRF-TOKEN识别有问题，桌面版本没有这个问题 postman 桌面版 同上Tests标签可以写成 pm.environment.set(&quot;xsrf-token&quot;, decodeURIComponent(pm.cookies.get(&quot;XSRF-TOKEN&quot;))) 使用laravel valet 时，postman不能正确访问域名…… 原因valet产生的SSL证书，所以被阻挡，手动关闭后正常使用 要关闭的位置 settings -&amp;gt; SSL certificate verifcation -&amp;gt; off 之后就可以正常使用了 使用valet时 link 与 park 混用会报错！</summary></entry><entry><title type="html">几天的份</title><link href="http://localhost:4000/living/2018/10/18/blog/" rel="alternate" type="text/html" title="几天的份" /><published>2018-10-18T08:00:00+08:00</published><updated>2018-10-18T08:00:00+08:00</updated><id>http://localhost:4000/living/2018/10/18/blog</id><content type="html" xml:base="http://localhost:4000/living/2018/10/18/blog/">&lt;h1 id=&quot;15号的份&quot;&gt;15号的份&lt;/h1&gt;

&lt;h2 id=&quot;染黑了&quot;&gt;染黑了&lt;/h2&gt;

&lt;p&gt;自己都感觉到内心在向着无底的黑暗靠近&lt;/p&gt;

&lt;p&gt;新键盘并没有人体工程学的好用&lt;/p&gt;

&lt;p&gt;估计以后都只会选择人体工程学的了&lt;/p&gt;

&lt;h2 id=&quot;开始处理权限了&quot;&gt;开始处理权限了&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;admin&lt;/code&gt;的基本部分快做完了&lt;/p&gt;

&lt;p&gt;之后是一般用户数据了&lt;/p&gt;

&lt;p&gt;按照计划的一样进行扩展&lt;/p&gt;

&lt;p&gt;说句自满的话&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;它不仅仅是一个游戏&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;16号的份&quot;&gt;16号的份&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;v-for&lt;/code&gt; 不能放在顶级标签上，会报错！&lt;/p&gt;

&lt;p&gt;更新了一下&lt;code class=&quot;highlighter-rouge&quot;&gt;docker&lt;/code&gt;镜像&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;role&lt;/code&gt; 部分也完成了……&lt;/p&gt;

&lt;p&gt;现在又累又饿……&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;18号的份&quot;&gt;18号的份&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;role&lt;/code&gt; 部分修正完成~~&lt;/p&gt;

&lt;p&gt;过程中确实补增了许多东西&lt;/p&gt;

&lt;p&gt;到验证了~~&lt;/p&gt;</content><author><name>K11</name></author><category term="日记" /><category term="vue" /><category term="laravel" /><summary type="html">15号的份 染黑了 自己都感觉到内心在向着无底的黑暗靠近 新键盘并没有人体工程学的好用 估计以后都只会选择人体工程学的了 开始处理权限了 admin的基本部分快做完了 之后是一般用户数据了 按照计划的一样进行扩展 说句自满的话 它不仅仅是一个游戏 16号的份 v-for 不能放在顶级标签上，会报错！ 更新了一下docker镜像 role 部分也完成了…… 现在又累又饿…… 18号的份 role 部分修正完成~~ 过程中确实补增了许多东西 到验证了~~</summary></entry><entry><title type="html">11号的份</title><link href="http://localhost:4000/living/2018/10/14/blog/" rel="alternate" type="text/html" title="11号的份" /><published>2018-10-14T08:00:00+08:00</published><updated>2018-10-14T08:00:00+08:00</updated><id>http://localhost:4000/living/2018/10/14/blog</id><content type="html" xml:base="http://localhost:4000/living/2018/10/14/blog/">&lt;h1 id=&quot;11号的份&quot;&gt;11号的份&lt;/h1&gt;

&lt;h2 id=&quot;队列&quot;&gt;队列&lt;/h2&gt;

&lt;p&gt;将特定 信息通知 推送到指定队列&lt;/p&gt;

&lt;p&gt;修改&lt;code class=&quot;highlighter-rouge&quot;&gt;horizon&lt;/code&gt; 后&lt;/p&gt;

&lt;p&gt;可以使用&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$user-&amp;gt;notify((new SendEmail($Token))-&amp;gt;onQueue('mail'));
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;或&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;use Notification;
Notification::send($user, (new SendEmail($Token))-&amp;gt;onQueue('mail'));
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id=&quot;roles&quot;&gt;roles&lt;/h2&gt;

&lt;p&gt;需要注意&lt;code class=&quot;highlighter-rouge&quot;&gt;guard&lt;/code&gt;对应&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;view&lt;/code&gt;与&lt;code class=&quot;highlighter-rouge&quot;&gt;models&lt;/code&gt; 要注意同步&lt;/p&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;blade&lt;/code&gt; 中使用时&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@role('role' , 'guard')
something
@endrole
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在路由中使用时&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Route::group(['middleware' =&amp;gt; ['auth:admin' , 'role:admin']], function () {

});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;也可以在控制器中使用&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public function __construct()
{
    $this-&amp;gt;middleware(['role:admin' , 'auth:admin']);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;14号的份&quot;&gt;14号的份&lt;/h1&gt;

&lt;h2 id=&quot;find-与-where-的坑&quot;&gt;find 与 where 的坑&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt; 不能准确 查找到对应条目&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;where&lt;/code&gt; 则可以，之后只有有意识的替换&lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;register&lt;/code&gt;的后端调整完成了~~~&lt;/p&gt;

&lt;p&gt;大概这种感觉&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/10/14/5bc33df12e03a.png&quot; alt=&quot;屏幕快照 2018-10-14 20.58.44&quot; /&gt;&lt;/p&gt;</content><author><name>K11</name></author><category term="日记" /><category term="laravel" /><summary type="html">11号的份 队列 将特定 信息通知 推送到指定队列 修改horizon 后 可以使用 $user-&amp;gt;notify((new SendEmail($Token))-&amp;gt;onQueue('mail')); 或 use Notification; Notification::send($user, (new SendEmail($Token))-&amp;gt;onQueue('mail')); roles 需要注意guard对应 view与models 要注意同步 在blade 中使用时 @role('role' , 'guard') something @endrole 在路由中使用时 Route::group(['middleware' =&amp;gt; ['auth:admin' , 'role:admin']], function () { }); 也可以在控制器中使用 public function __construct() { $this-&amp;gt;middleware(['role:admin' , 'auth:admin']); } 14号的份 find 与 where 的坑 find 不能准确 查找到对应条目 where 则可以，之后只有有意识的替换find register的后端调整完成了~~~ 大概这种感觉</summary></entry><entry><title type="html">10号的份</title><link href="http://localhost:4000/living/2018/10/10/blog/" rel="alternate" type="text/html" title="10号的份" /><published>2018-10-10T08:00:00+08:00</published><updated>2018-10-10T08:00:00+08:00</updated><id>http://localhost:4000/living/2018/10/10/blog</id><content type="html" xml:base="http://localhost:4000/living/2018/10/10/blog/">&lt;h2 id=&quot;lavavel-valet&quot;&gt;lavavel valet&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;valet share&lt;/code&gt; 在TLS的情况下会返回&lt;code class=&quot;highlighter-rouge&quot;&gt;301&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;可以确定为&lt;code class=&quot;highlighter-rouge&quot;&gt;valet v2.1.1&lt;/code&gt; 的 BUG&lt;/p&gt;

&lt;p&gt;可以先&lt;code class=&quot;highlighter-rouge&quot;&gt;valet unsecure&lt;/code&gt; 再 &lt;code class=&quot;highlighter-rouge&quot;&gt;valet share&lt;/code&gt; 关闭&lt;code class=&quot;highlighter-rouge&quot;&gt;TLS&lt;/code&gt; 和裸奔没区别 可以用来进行暂时测试&lt;/p&gt;

&lt;p&gt;汇率已经到&lt;code class=&quot;highlighter-rouge&quot;&gt;7.5&lt;/code&gt;了……&lt;/p&gt;</content><author><name>K11</name></author><category term="日记" /><category term="laravel" /><summary type="html">lavavel valet valet share 在TLS的情况下会返回301 可以确定为valet v2.1.1 的 BUG 可以先valet unsecure 再 valet share 关闭TLS 和裸奔没区别 可以用来进行暂时测试 汇率已经到7.5了……</summary></entry><entry><title type="html">2FA 基本完成了</title><link href="http://localhost:4000/living/2018/10/04/blog/" rel="alternate" type="text/html" title="2FA 基本完成了" /><published>2018-10-04T08:01:00+08:00</published><updated>2018-10-04T08:01:00+08:00</updated><id>http://localhost:4000/living/2018/10/04/blog</id><content type="html" xml:base="http://localhost:4000/living/2018/10/04/blog/">&lt;h1 id=&quot;2fa-基本完成了&quot;&gt;2FA 基本完成了&lt;/h1&gt;

&lt;p&gt;后端还缺权限的判断，与&lt;code class=&quot;highlighter-rouge&quot;&gt;code message&lt;/code&gt;预制编码&lt;/p&gt;

&lt;p&gt;前端缺特殊&lt;code class=&quot;highlighter-rouge&quot;&gt;code message&lt;/code&gt;的代码响应 指的是2FA的强制验证&lt;/p&gt;

&lt;p&gt;之后要加入批量导入功能 否则会累死~~&lt;/p&gt;

&lt;h2 id=&quot;laravel-model-的坑&quot;&gt;laravel model 的坑&lt;/h2&gt;

&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;get()&lt;/code&gt;去取到的数据是&lt;code class=&quot;highlighter-rouge&quot;&gt;array&lt;/code&gt; 而不是&lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;可以手动转换 也可以直接使用 根据需求决定&lt;/p&gt;</content><author><name>K11</name></author><category term="日记" /><category term="laravel" /><summary type="html">2FA 基本完成了 后端还缺权限的判断，与code message预制编码 前端缺特殊code message的代码响应 指的是2FA的强制验证 之后要加入批量导入功能 否则会累死~~ laravel model 的坑 使用get()去取到的数据是array 而不是object 可以手动转换 也可以直接使用 根据需求决定</summary></entry><entry><title type="html">十月的第一天</title><link href="http://localhost:4000/living/2018/10/01/blog/" rel="alternate" type="text/html" title="十月的第一天" /><published>2018-10-01T08:01:00+08:00</published><updated>2018-10-01T08:01:00+08:00</updated><id>http://localhost:4000/living/2018/10/01/blog</id><content type="html" xml:base="http://localhost:4000/living/2018/10/01/blog/">&lt;h1 id=&quot;渐渐的上手了&quot;&gt;渐渐的上手了&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;laravel&lt;/code&gt; 的错误信息 截取成功&lt;/p&gt;

&lt;p&gt;标准化信息返回问题不大 方法是使用&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;try{
	return 'something';
}catch(\Exception $e){
	return $e-&amp;gt;getMessage();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;也可以在&lt;code class=&quot;highlighter-rouge&quot;&gt;App\Exceptions\Handler&lt;/code&gt; 的&lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt;中做截取&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;switch($exception-&amp;gt;getMessage()){
	case 'someMessage';
	return 'someMessage';
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;再次感受到先做后端的重要性！！&lt;/p&gt;

&lt;h2 id=&quot;laravel-model-的一些坑&quot;&gt;laravel model 的一些坑&lt;/h2&gt;

&lt;p&gt;如果直接使用&lt;code class=&quot;highlighter-rouge&quot;&gt;find()&lt;/code&gt;后使用&lt;code class=&quot;highlighter-rouge&quot;&gt;delete()&lt;/code&gt;有返回&lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;的可能性&lt;/p&gt;

&lt;p&gt;可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;where('id' , $id)&lt;/code&gt;后使用&lt;code class=&quot;highlighter-rouge&quot;&gt;delete()&lt;/code&gt; 就可以避免&lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;的问题&lt;/p&gt;</content><author><name>K11</name></author><category term="日记" /><category term="vue" /><category term="laravel" /><summary type="html">渐渐的上手了 laravel 的错误信息 截取成功 标准化信息返回问题不大 方法是使用 try{ return 'something'; }catch(\Exception $e){ return $e-&amp;gt;getMessage(); } 也可以在App\Exceptions\Handler 的render中做截取 switch($exception-&amp;gt;getMessage()){ case 'someMessage'; return 'someMessage'; } 再次感受到先做后端的重要性！！ laravel model 的一些坑 如果直接使用find()后使用delete()有返回null的可能性 可以使用where('id' , $id)后使用delete() 就可以避免null的问题</summary></entry><entry><title type="html">记录</title><link href="http://localhost:4000/living/2018/09/28/blog/" rel="alternate" type="text/html" title="记录" /><published>2018-09-28T08:00:00+08:00</published><updated>2018-09-28T08:00:00+08:00</updated><id>http://localhost:4000/living/2018/09/28/blog</id><content type="html" xml:base="http://localhost:4000/living/2018/09/28/blog/">&lt;h1 id=&quot;记录&quot;&gt;记录&lt;/h1&gt;

&lt;p&gt;工作指南&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Code Message UI 部分处理&lt;/li&gt;
  &lt;li&gt;权限手动调整UI&lt;/li&gt;
  &lt;li&gt;权限系统的全局化，将权限处理加入列队&lt;/li&gt;
  &lt;li&gt;特定返回信息的响应&lt;/li&gt;
  &lt;li&gt;二步验证 UI 部分&lt;/li&gt;
  &lt;li&gt;语言全面本地化 【vuex-i18n】&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;code-message&quot;&gt;code message&lt;/h2&gt;

&lt;p&gt;工作详解&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;将全局信息显示功能独立&lt;/li&gt;
  &lt;li&gt;需要为信息增加分页显示&lt;/li&gt;
  &lt;li&gt;搜索结果是否使用通用部分显示&lt;/li&gt;
  &lt;li&gt;识别2fa验证信息并相应【全局模组】&lt;/li&gt;
  &lt;li&gt;新建信息页面 【需要验证2FA】&lt;/li&gt;
  &lt;li&gt;编辑信息页面 【需要验证2FA】&lt;/li&gt;
  &lt;li&gt;删除信息页面 【需要验证2FA】&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;好在&lt;code class=&quot;highlighter-rouge&quot;&gt;2FA&lt;/code&gt;与 &lt;code class=&quot;highlighter-rouge&quot;&gt;code message&lt;/code&gt;可以使用代码手动添加，如果没先做后端真是难以想象，估计是灾难或者加班地狱吧&lt;/p&gt;

&lt;p&gt;反而是语言本地化容易的，可以在休息时完成。&lt;/p&gt;

&lt;p&gt;其他 貌似2FA的优先度比较高，但是信息提示也是非常重要&lt;/p&gt;

&lt;p&gt;对功能分组编写非常重要！一人并行写是比较容易混乱 笔记是一定要的&lt;/p&gt;

&lt;p&gt;好处是发现问题可以及时修正，也要考虑之后的多人协作的效率问题&lt;/p&gt;

&lt;p&gt;多是交给组长处理吧&lt;/p&gt;

&lt;h2 id=&quot;坑&quot;&gt;坑&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bootstrap 4.*&lt;/code&gt;是没有图标的 需要自己找&lt;/p&gt;

&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;fontawesome&lt;/code&gt; 解决了&lt;/p&gt;

&lt;h2 id=&quot;23号的份&quot;&gt;23号的份&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Code Message&lt;/code&gt;资源获取、更新、删除部分的UI完成。 调用与测试正常&lt;/p&gt;

&lt;p&gt;想着将&lt;code class=&quot;highlighter-rouge&quot;&gt;laravel&lt;/code&gt; 自带的UI 使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;vue&lt;/code&gt; 重构 最严重的问题还是在本地化语言上。&lt;/p&gt;

&lt;p&gt;只能将使用的分离，其他的再做打算 😭&lt;/p&gt;

&lt;p&gt;基本上这种感觉&lt;/p&gt;

&lt;p&gt;分页显示也是有做的~&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/09/24/5ba7f4b0cbf57.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;26号的份&quot;&gt;26号的份&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;code message&lt;/code&gt; 部分基本完成，之后要调整&lt;code class=&quot;highlighter-rouge&quot;&gt;code&lt;/code&gt;并修正一些细小的地方。&lt;/p&gt;

&lt;p&gt;感到前端与后端的耦合度很高，这样之后是大麻烦，要不要全部使用&lt;code class=&quot;highlighter-rouge&quot;&gt;vuex&lt;/code&gt;呢……&lt;/p&gt;

&lt;p&gt;之后 先处理&lt;code class=&quot;highlighter-rouge&quot;&gt;2fa&lt;/code&gt;与验证吧，&lt;code class=&quot;highlighter-rouge&quot;&gt;2fa&lt;/code&gt; 比如是全局的…… 不跨域使用&lt;code class=&quot;highlighter-rouge&quot;&gt;oauth&lt;/code&gt;的意义不大&lt;/p&gt;

&lt;p&gt;不过使用&lt;code class=&quot;highlighter-rouge&quot;&gt;oauth&lt;/code&gt;容易啊~~ 啊啊啊啊啊~~~&lt;/p&gt;

&lt;h2 id=&quot;28号的份&quot;&gt;28号的份&lt;/h2&gt;

&lt;p&gt;添加&lt;code class=&quot;highlighter-rouge&quot;&gt;2fa ui&lt;/code&gt;了，没什么创造性的劳动……&lt;/p&gt;

&lt;p&gt;使&lt;code class=&quot;highlighter-rouge&quot;&gt;button:hover&lt;/code&gt;文字与样式 随鼠标产生变化&lt;/p&gt;

&lt;p&gt;注意定义&lt;code class=&quot;highlighter-rouge&quot;&gt;css&lt;/code&gt; 否则效果不会有变化&lt;/p&gt;

&lt;p&gt;如果使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;vuex-i18n&lt;/code&gt; 可以使用语言行替代 对应位置文字&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;btn btn-outline-success&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;v-on:mouseenter=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;button = 'in button'&quot;&lt;/span&gt; 
&lt;span class=&quot;na&quot;&gt;v-on:mouseleave=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;button = 'out button'&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;na&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'out button'&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.btn-outline-success&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:hover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.btn-outline-success&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:not&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:disabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:not&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.disabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:active&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.btn-outline-success&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:not&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:disabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:not&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.disabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:focus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;box-shadow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name>K11</name></author><category term="日记" /><category term="vue" /><category term="laravel" /><summary type="html">记录 工作指南 Code Message UI 部分处理 权限手动调整UI 权限系统的全局化，将权限处理加入列队 特定返回信息的响应 二步验证 UI 部分 语言全面本地化 【vuex-i18n】 code message 工作详解 将全局信息显示功能独立 需要为信息增加分页显示 搜索结果是否使用通用部分显示 识别2fa验证信息并相应【全局模组】 新建信息页面 【需要验证2FA】 编辑信息页面 【需要验证2FA】 删除信息页面 【需要验证2FA】 好在2FA与 code message可以使用代码手动添加，如果没先做后端真是难以想象，估计是灾难或者加班地狱吧 反而是语言本地化容易的，可以在休息时完成。 其他 貌似2FA的优先度比较高，但是信息提示也是非常重要 对功能分组编写非常重要！一人并行写是比较容易混乱 笔记是一定要的 好处是发现问题可以及时修正，也要考虑之后的多人协作的效率问题 多是交给组长处理吧 坑 bootstrap 4.*是没有图标的 需要自己找 使用fontawesome 解决了 23号的份 Code Message资源获取、更新、删除部分的UI完成。 调用与测试正常 想着将laravel 自带的UI 使用 vue 重构 最严重的问题还是在本地化语言上。 只能将使用的分离，其他的再做打算 😭 基本上这种感觉 分页显示也是有做的~ 26号的份 code message 部分基本完成，之后要调整code并修正一些细小的地方。 感到前端与后端的耦合度很高，这样之后是大麻烦，要不要全部使用vuex呢…… 之后 先处理2fa与验证吧，2fa 比如是全局的…… 不跨域使用oauth的意义不大 不过使用oauth容易啊~~ 啊啊啊啊啊~~~ 28号的份 添加2fa ui了，没什么创造性的劳动…… 使button:hover文字与样式 随鼠标产生变化 注意定义css 否则效果不会有变化 如果使用 vuex-i18n 可以使用语言行替代 对应位置文字 &amp;lt;button type=&quot;button&quot; class=&quot;btn btn-outline-success&quot; v-on:mouseenter=&quot;button = 'in button'&quot; v-on:mouseleave=&quot;button = 'out button'&quot;&amp;gt; &amp;lt;/button&amp;gt; data(){ return { button: 'out button' } } .btn-outline-success:hover{ background-color: red; } .btn-outline-success:not(:disabled):not(.disabled):active{ background-color: red; } .btn-outline-success:not(:disabled):not(.disabled):focus{ box-shadow: none; }</summary></entry><entry><title type="html">vuex 提交后清空很重要！</title><link href="http://localhost:4000/living/2018/09/19/blog/" rel="alternate" type="text/html" title="vuex 提交后清空很重要！" /><published>2018-09-19T08:00:00+08:00</published><updated>2018-09-19T08:00:00+08:00</updated><id>http://localhost:4000/living/2018/09/19/blog</id><content type="html" xml:base="http://localhost:4000/living/2018/09/19/blog/">&lt;h1 id=&quot;18号的份&quot;&gt;18号的份&lt;/h1&gt;

&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;vuex&lt;/code&gt; 推送信息时 会让之前的消息一起发送变动&lt;/p&gt;

&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;vue&lt;/code&gt; 工具发现 &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; 的数据被覆盖&lt;/p&gt;

&lt;p&gt;使用手动输入框 更新 发现&lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt;并没有更新只是视图上的变化&lt;/p&gt;

&lt;p&gt;最后发现为 提交&lt;code class=&quot;highlighter-rouge&quot;&gt;active&lt;/code&gt;后没有清空数据导致……&lt;/p&gt;

&lt;p&gt;之后需要分离信息提示部分 并使后端返回数据规整化&lt;/p&gt;

&lt;p&gt;并能使用固定数字代码 进行快速返回&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;admin&lt;/code&gt; 安全部分要完工了~~ 撒花~~&lt;/p&gt;

&lt;h1 id=&quot;20号的份&quot;&gt;20号的份&lt;/h1&gt;

&lt;p&gt;使&lt;code class=&quot;highlighter-rouge&quot;&gt;code&lt;/code&gt;编码换用于信息的快速返回&lt;/p&gt;

&lt;p&gt;当然也可以使用对应信息语句直接返回&lt;/p&gt;

&lt;h2 id=&quot;vue-的坑&quot;&gt;vue 的坑&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vue&lt;/code&gt; 的&lt;code class=&quot;highlighter-rouge&quot;&gt;v-for&lt;/code&gt;一定要定义&lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt;不然会出现渲染不正常 数据正常&lt;/p&gt;

&lt;p&gt;重要的是并不会提示错误！！&lt;/p&gt;

&lt;h2 id=&quot;laravel-的坑&quot;&gt;laravel 的坑&lt;/h2&gt;

&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;laravel markdown email&lt;/code&gt;时，不能独立定义&lt;code class=&quot;highlighter-rouge&quot;&gt;header&lt;/code&gt;与&lt;code class=&quot;highlighter-rouge&quot;&gt;footer&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;@component('mail::button')&lt;/code&gt;时，前方要清除空白。 否则不能正常渲染&lt;/p&gt;

&lt;p&gt;要支持&lt;code class=&quot;highlighter-rouge&quot;&gt;header&lt;/code&gt;与&lt;code class=&quot;highlighter-rouge&quot;&gt;footer&lt;/code&gt; ，将&lt;code class=&quot;highlighter-rouge&quot;&gt;@component('mail::message')&lt;/code&gt; 改为 &lt;code class=&quot;highlighter-rouge&quot;&gt;@component('mail::layout')&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;下方是修改后的例子，也可以直接复制&lt;code class=&quot;highlighter-rouge&quot;&gt;message.blade.php&lt;/code&gt;进行修改&lt;/p&gt;

&lt;p&gt;找不到&lt;code class=&quot;highlighter-rouge&quot;&gt;message.blade.php&lt;/code&gt;时 运行&lt;code class=&quot;highlighter-rouge&quot;&gt;php artisan vendor:publish --tag=laravel-mail&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;之后可以在&lt;code class=&quot;highlighter-rouge&quot;&gt;vendor/mail/markdown&lt;/code&gt;下找到对应文件。&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@component('mail::layout')

@slot('header')
@component('mail::header', ['url' =&amp;gt; config('app.url')])
header
@endcomponent
@endslot

# Introduction
The body of your message.

@component('mail::button', ['url' =&amp;gt; $url])
button
@endcomponent

Thanks,&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;

@slot('footer')
@component('mail::footer')
© footer
@endcomponent
@endslot
@endcomponent
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name>K11</name></author><category term="日记" /><category term="vue" /><category term="laravel" /><summary type="html">18号的份 使用vuex 推送信息时 会让之前的消息一起发送变动 使用vue 工具发现 state 的数据被覆盖 使用手动输入框 更新 发现state并没有更新只是视图上的变化 最后发现为 提交active后没有清空数据导致…… 之后需要分离信息提示部分 并使后端返回数据规整化 并能使用固定数字代码 进行快速返回 admin 安全部分要完工了~~ 撒花~~ 20号的份 使code编码换用于信息的快速返回 当然也可以使用对应信息语句直接返回 vue 的坑 vue 的v-for一定要定义key不然会出现渲染不正常 数据正常 重要的是并不会提示错误！！ laravel 的坑 使用laravel markdown email时，不能独立定义header与footer 使用@component('mail::button')时，前方要清除空白。 否则不能正常渲染 要支持header与footer ，将@component('mail::message') 改为 @component('mail::layout') 下方是修改后的例子，也可以直接复制message.blade.php进行修改 找不到message.blade.php时 运行php artisan vendor:publish --tag=laravel-mail 之后可以在vendor/mail/markdown下找到对应文件。 @component('mail::layout') @slot('header') @component('mail::header', ['url' =&amp;gt; config('app.url')]) header @endcomponent @endslot # Introduction The body of your message. @component('mail::button', ['url' =&amp;gt; $url]) button @endcomponent Thanks,&amp;lt;br&amp;gt; @slot('footer') @component('mail::footer') © footer @endcomponent @endslot @endcomponent</summary></entry><entry><title type="html">新键盘购入！</title><link href="http://localhost:4000/living/2018/09/16/blog/" rel="alternate" type="text/html" title="新键盘购入！" /><published>2018-09-16T08:00:00+08:00</published><updated>2018-09-16T08:00:00+08:00</updated><id>http://localhost:4000/living/2018/09/16/blog</id><content type="html" xml:base="http://localhost:4000/living/2018/09/16/blog/">&lt;h1 id=&quot;11号的份&quot;&gt;11号的份&lt;/h1&gt;

&lt;h2 id=&quot;新键盘到了&quot;&gt;新键盘到了&lt;/h2&gt;

&lt;p&gt;果然用习惯了&lt;code class=&quot;highlighter-rouge&quot;&gt;Microsoft Sculpt Ergonomic Desktop&lt;/code&gt;套装后&lt;/p&gt;

&lt;p&gt;正常的布局的键盘难以适应…… 虽然新键盘的手感不错……&lt;/p&gt;

&lt;p&gt;还是有点局促……&lt;/p&gt;

&lt;h1 id=&quot;16号的份&quot;&gt;16号的份&lt;/h1&gt;

&lt;h2 id=&quot;增加信息提示&quot;&gt;增加信息提示&lt;/h2&gt;

&lt;p&gt;增加信息提示功能，将返回信息推入 &lt;code class=&quot;highlighter-rouge&quot;&gt;vuex&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;并可以同步移除。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/09/17/5b9ead3d4abbe.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;##其他&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git&lt;/code&gt;居然有中文版了！&lt;/p&gt;</content><author><name>K11</name></author><category term="日记" /><summary type="html">11号的份 新键盘到了 果然用习惯了Microsoft Sculpt Ergonomic Desktop套装后 正常的布局的键盘难以适应…… 虽然新键盘的手感不错…… 还是有点局促…… 16号的份 增加信息提示 增加信息提示功能，将返回信息推入 vuex 并可以同步移除。 ##其他 git居然有中文版了！</summary></entry></feed>